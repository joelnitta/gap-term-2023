---
title: "Gap Term 2023"
format:
  revealjs:
    incremental: false
    css: styles.css
    include-in-header: 
      text: |
        <style>
        .center-xy {
          margin: 0;
          position: absolute;
          top: 50%;
          left: 50%;
          -ms-transform: translateY(-50%), translateX(-50%);
          transform: translateY(-50%), translateX(-50%);
        }
        .center-x {
          margin: 0;
          position: absolute;
          left: 50%;
          -ms-transform: translateX(-50%);
          transform: translateX(-50%);
        }
        </style>
execute: 
  echo: true
author: ニッタ ジョエル
institute: <a href="https://joelnitta.com">https://joelnitta.com</a>
footer: <a href="https://joelnitta.github.io/gap-term-2023">https://joelnitta.github.io/gap-term-2023</a>
html:
  mathjax: true
---

# Day 1: RStudio入門、BLAST、データ入力

2023-10-12

## なぜコードを使うのか？

- 解析を**再現可能**にするため

## 再現性とは？

- 他の人（**将来の自分**を含めて）があなたの解析を**再度行って、同じ結果**を得ることができること

## なぜR?

:::::: {.incremental}

- タダ
- 柔軟性
- 広く生態学に使われている
- コミュニティー

::::::

## RとRStudio 

:::: {.columns}

::: {.column width="50%"}
- Rとは「R Project for Statistical Computing」という組織が提供しているオープンソース（タダの）プログラミング言語
:::

::: {.column width="50%"}
![](https://www.r-project.org/logo/Rlogo.svg)
:::

::::

## RとRStudio

:::: {.columns}

::: {.column width="50%"}
- RStudioとはPosit社が提供しているIDE（Integrated Development Environment）
  - 基本的な機能はタダ
  - 会社向けの機能は有料
  - Rのコードを書く・実行する最適なソフト
:::

::: {.column width="50%"}
![](https://posit.co/wp-content/uploads/2022/10/thumbnail-3.jpg)
:::

::::

## 資料

:::: {.columns}

::: {.column width="50%"}
- [R for Reproducible Scientific Analysis（日本語）](https://swcarpentry-ja.github.io/r-novice-gapminder/ja/)

- R for Data Science
  - 英語版はオンラインで無料 [https://r4ds.had.co.nz/](https://r4ds.had.co.nz/)
  - 日本語版は[アマゾン](https://www.amazon.co.jp/R%E3%81%A7%E3%81%AF%E3%81%98%E3%82%81%E3%82%8B%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9-Hadley-Wickham/dp/487311814X)などから 
:::

::: {.column width="50%"}
![](https://m.media-amazon.com/images/I/91WTLn1DrBL.jpg)
:::

::::

## 解析の準備：プロジェクトを作る

- File → New Project → New Directory → New Project

- 名前と置く場所を選択する。名前は`mukudori-analysis`にしよう。

- 場所は**自分が後で探しやすいところ**にしましょう（**デスクトップ**がおすすめ）

---

![](images/project-setup.png)

## プロジェクトを作る

- RStudioが再起動されて、新しいプロジェクトに入る

- 右下の「Files」パネルに以下のファイルが入っていることを確認：
  - `mukudori-analysis.Rproj`
  - `.gitignore`（gitを使っている場合のみ）

---

![](images/new-project.png)

## `.Rproj`ファイルについて

- `mukudori-analysis.Rproj`はRStudioの設定を保存するためのファイルで、基本的には**手でイジる必要はない**

- でも、このプロジェクトを開くためには便利
  - 一旦RStudioを閉じて、`mukudori-analysis.Rproj`のアイコンをダブルクリックすると、またプロジェクトに入ることが出来る。

---

![](images/rproj-icon.png)

## データを置く場所を作る

- New Folderボタン（右下のパネル）をクリック→ `data_raw`というフォルダーを作る

---

![](images/new-folder.png)

## データを置く場所を作る

- Teamsで共有した以下のファイルをダウンロードして、`data_raw`に置きましょう
  - `Chiba-1-ZBJ.fasta`
  - `Chiba-1-trnL.fasta`
  - `4_相同性が高い生物種リスト(BLAST結果10位まで)_ALL.xlsx`
  - `4_全生物種リスト(BLAST結果10位まで).xlsx`

---

![](images/project-data-added.png)

## データを置く場所を作る

- `data_raw`フォルダーを読み込み専用にしよう
  - **生データを手でいじらないのが鉄則**
  - Rに読み込んだ上でRの中で操りましょう

---

![](images/read-only.png)

## 他のフォルダーを作る{.smaller}

続いて、同じように他の以下のフォルダーも作る：

- `data_raw/`
  - 生データを置く場所。生データは絶対にいじらない（読み込み専用）
- `data/`
  - コードによって整えられたデータを置く場所。使い捨てのつもりで良い。
- `results/`
  - コードによって得られた結果を置く場所。これも使い捨て。
- `code/`
  - コードを置く場所。ベストプラクティスはgitでバージョン管理を施す。

**生データ**と**コード**があればいつでも結果は得られる（再現できる）

## RStudioのデフォルト設定を<br>変えましょう

前のセッションのデータが残っていることは<br>再現的に**ダメ**！

. . . 

Tools → Global Options → General → Workspace

- "Restore .RData into workspace at startup" → **外す**
- "Save workspace to .RData on exit:" → **"Never"**

## RStudioのデフォルト設定を<br>変えましょう

前のセッションのデータが残っていることは再現の観点<br>からダメ！

![](images/settings_change.png){fig-alt="Screenshot showing how to change Rstudio settings for .RData"}

## DNAバーコードとは？

::: {.columns}
::: {.column}

- DNAによって**種同定**を行う
  - 今まで種の同定の仕様がなかった・非常に難しかったケース（食性解析）に便利
:::
::: {.column}
![](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRILebKXDqs9YG9XcUE52KFwYbe0aHljP_c5g&usqp=CAU)
:::
:::

- **DNAの類似度を測るツールが必要** ➡︎ `BLAST`

## `BLAST`とは？

- Basic Local **Alignment** Search Tool

- **Alignment** （アラインメント）：二つ以上のDNA塩基配列を並べたもの

![](images/alignment.png)

![](images/alignment_text.png)

## `BLAST`の使い方

- Subject（「主体」、手元にあるシーケンス）を**標準データベース**に対して検索し、Target（「対象」、当たったシーケンス）との類似度を測る

- **結果は標準データベースによる（重要！）**

- Targetが複数ある場合もあるし、何にも当たらない場合もある

## `BLAST`を使ってみよう

- ムクドリ調査で得られた配列を**GenBank**（最も大きなオンラインDNAデータベース）に対して検索してみよう

  - GenBankとDDBJ（DNA Data Bank of Japan）に入っているデータは基本的に一緒。別のデータベースがあるのは、それぞれの地域のユーザーのため。

## `BLAST`を使ってみよう

- <https://blast.ncbi.nlm.nih.gov/>に行って、「Nucleotide BLAST」をクリック
  - Nucleotide = DNA塩基配列

---

![](images/blast-site.png)

## `BLAST`を使ってみよう

- `Chiba-1-ZBJ.fasta`をRStudioで開いて、最初の二行をコピーして、検索パネルに貼り付ける

- `Program Selection`で、「Somewhat similar sequences (blastn)」を選択する（シーケンス業者が使ったと一緒、一般的な`BLAST`の種類）
  - `BLAST`には複数の種類と様々な設定がある！今回はデフォルトを使うけど、これも**結果を影響する**ので、本当は設定を理解する必要がある

- `BLAST`ボタンを押して、結果が出るまで待つ（大体１分以内に終わる）

---

![](images/blast-input.png)

## `BLAST`を使ってみよう

- 結果には**複数の配列が返ってくる**

- 重要な項目
  - `e-value`: subjectとtargetが偶然に一致する確率。低い方がいい（`4e-72` = $4 \times 10^{-72}$）
  - `identity`：類似度（パーセント）

この場合、当たったシーケンスの中で、一つだけが他のより類似度がグンと高い（`Polydesmus sp`、100％）。それをクリックしてみよう。

---

![](images/blast-results.png)

---

![](images/blast-results-2.png)

## `BLAST`を使ってみよう

クリックしたら、subjectとtargetのアラインメントが見える。

- 最も近いtargetと次に近いtargetの結果を比べてみよう。何が違う？

- あなたなら、このシーケンスを何と同定しますか？

## `BLAST`を使ってみよう

もう一回、同じ作業をしてみよう。

今回は`Chiba-1-trnL.fasta`に入っている最初の２行を使ってみよう。

- 最も近いtargetと次に近いtargetの結果を比べてみよう。何が違う？

- あなたなら、このシーケンスを何と同定しますか？

## Rを計算機として使う

- RStudioのコンソール（左下のパネル）にカーソルを置いて、簡単な計算をしてみましょう：

::: large

```{r}
2 * 20
```

:::

おめでとうございます！Rプログラミングができました！

## オブジェクト（変数）について

- 次に、Rの中のデータを変数（Rでは、「オブジェクト Object」と呼ぶ）として保存しよう：

::: large

```{r}
age <- 2 * 20
```

:::

## オブジェクト（変数）について

これだけでは何も返ってこない。

変数の内容を確認するには、コンソールにその変数の名前を打てば良い：

::: large

```{r}
age
```

:::

## 関数とは

何かの値（インプット）を受けて、処理して、計算結果（アウトプット）を返すもの

::: center-x

<img src="https://manamina.valuesccg.com/uploads/content/image/12292/__.png" alt="drawing" height="100">

::: small
<https://manamina.valuesccg.com/articles/756>
:::

:::

## 関数とは

関数の書き方：

- 関数名(引数)

例えば

::: large

```{r}
round(3.1415, digits = 1)
```

:::

## 関数とは

関数の使い方を確認したい時は`?関数名`と打って、ヘルプファイルを参照すれば良い

::: large

```{r}
?round
```

:::

## パッケージとは

- Rパッケージとは、Rが出来ることを大幅に増やす「追加」のソフト（関数のまとまり）
  - 現在、**２万**近くのパッケージがある！

- 今回は`xlsx`ファイルを読み込むためのパッケージ、そして他のデータ解析をやりやすくするパッケージをインストールする

## パッケージのインストール

Rパッケージのインストールを行うには、`install.packages()`を使う：

```{r}
#| label: install
#| echo: true
#| eval: false
install.packages(c("readxl", "janitor", "tidyverse"))
```

一回インストールしたら、次回からはしなくて良いので、これはコードとして保存しない

## パッケージのロード

- パッケージをインストールしたら、使える状態するにはロードすることが必要
  - インストールは一回でいい
  - ロードは毎回必要

`library()`関数でロードする：

::: large

```{r}
library(tidyverse)
```

:::

## データの読み込み

- 今回のデータは`.xlsx`なので、`readxl`パッケージの`read_excel()`関数を使う。

- このコードを`barcode-analysis.R`として保存してください：

```{r}
#| label: load-animals
library(readxl)

blast_animals <- read_excel(
  "data_raw/4_相同性が高い生物種リスト(BLAST結果10位まで)_ALL.xlsx")
```

## データの読み込み

`blast_animals`を打つと、読み込まれたデータが表示される：

```{r}
#| label: show-animals
#| eval: true

blast_animals
```

## データを整える

- 行の名前を確かめてください

::: {.incremental}

- 大文字と小文字、スペースやシャープが入っているでしょう？これはコードを打つ以上、邪魔になるので、**簡単な**行名に変えよう
  - `janitor`パッケージの`clean_names()`関数を使う

:::

## データを整える

以下のコードを試してください：

```{r}
#| label: clean-names-show
#| eval: false
library(readxl)
library(janitor)

blast_animals <- read_excel(
  "data_raw/4_相同性が高い生物種リスト(BLAST結果10位まで)_ALL.xlsx")

clean_names(blast_animals)
```

---

```{r}
#| label: clean-names-hide
#| eval: true
#| echo: false
library(readxl)
library(janitor)

clean_names(blast_animals)
```

## データを整える

行名がスッキリしたでしょう？

でも、どうやってこのデータのバージョンの保存ができるのでしょうか？

## データを整える

```{r}
#| label: clean-names-save
library(readxl)
library(janitor)

blast_animals <- read_excel(
  "data_raw/4_相同性が高い生物種リスト(BLAST結果10位まで)_ALL.xlsx")

blast_animals <- clean_names(blast_animals)
```

とりあえずこれで良い。もっとスマートなやり方もあるけど、それは次回の楽しみにしよう。

## 宿題

- 宿題は`day1-hw.R`に入っている（teamsかgithubらダウンロード）

- 「答え」にRコードを書いてください

- 次回までにメールでニッタまで送ってください

# Day 2: データの整理

2023-10-19

## 「データラングリング」とは？

. . .

- 「wrangle」= （元々は牛などを）思う通りに整理すること

- データが入って来たら、必ずしも**解析しやすい**形になっていない
  - データを**整える必要がある**

---

![Image by Allison Horst](https://datasciencecampus.github.io/DSCA_data_wrangling_with_r/slides/images/data_cowboy.png){fig-alt="data wrangling monsters"}

## EDAとは？

. . .

- EDA = **E**ploratory **D**ata **A**nalysis

- 本格的なデータ解析（モデルの構築など）に入る前に、とりあえずデータの基本的な特徴をつかむこと

---

![Image by Allison Horst](images/ggplot2_exploratory.png)


## データラングリングとEDA

- データラングリングとEDAを**一緒に**にすることが多い

- 様々なRパッケージがあるが、ここでは`tidyverse`を使う
  - 初心者に（上級者にも）使いやすい
  - 本当は複数のパッケージを含む（`dplyr`、`tidyr`、`ggplot`など）

- DNAバーコードデータのデータラングリングとEDAをやってみましょう！

---

![Image by Allison Horst](images/tidyverse_celestial.png)

## `tidyverse`のインストール

- まずは、`tidyverse`をインストールしましょう（複数のパッケージを含むので、ちょっと時間かかる）

```{r}
#| eval: false
install.packages("tidyverse")
```

## データを読み込む

- `barcode-analysis.R`に入っているコードで前回と同じようにデータを読み込みましょう

- これからは`tidyverse`を使うので、`library(tidyverse)`を加える

```{r}
library(tidyverse)
library(readxl)
library(janitor)

blast_animals <- read_excel(
  "data_raw/4_相同性が高い生物種リスト(BLAST結果10位まで)_ALL.xlsx")

blast_animals <- clean_names(blast_animals)
```

## まず、データを眺める

`blast_animals`をコンソールで打つと、基本的な情報が返ってくる

- 行のデータの種類
- 列の数
- 行の数

## まず、データを眺める

- このデータがどうなっているのか理解するためには、まず全体の様子を見てみましょう

- `Environment`パネルの`blast_animals`をクリックすると、エクセルのような画面が出てくる

## まず、データを眺める

- `number_otu_id`: OTUの個人番号みたいな物。一シーケンスあたり、一つの番号がついている
- `chiba_1_zbj`、`chiba_2_zbj`など：それぞれの地点において、各OTUの頻度（リードの数）

## まず、データを眺める{.smaller}

- `_top1`で終わる行はBLASTの結果
  - `accession_top1`:一致したシーケンスのID
  - `target_top1`:一致したシーケンスの学名
  - `identity_top1`:一致したシーケンスとOTUとの類似度
  - `alignment_length_top1`:一致したシーケンスとOTUとのアラインメントの長さ
  - `species_top1`:一致したシーケンスの和名

`_top1`は最も近い「当たり」、`_top2`はその次に高いもの、など

## 列の順を並び変える

- `arrange(data, column)`
  - デフォルトで小さいから大きい順

```{r}
arrange(blast_animals, chiba_1_zbj)
```

## 列の順を並び変える

- デフォルトで小さい順（あるいは、Aの方）から並ぶ
- 大きい方（あるいは、Zの方）から並べたい時は`desc()`を使う

```{r}
arrange(blast_animals, desc(chiba_1_zbj))
arrange(blast_animals, target_top1, identity_top1)
```

## 列の順を並び変える

- `arrange(data, column1, column2)`で複数の行によって並び変える

```{r}
arrange(blast_animals, target_top1, identity_top1)
```

## 行を抜き出す

- `select(data, column)`で行を抜き出す

```{r}
select(blast_animals, number_otu_id, chiba_1_zbj)
```

## 行を抜き出す

- `select(data, column1, column2)`で行を抜き出す
  - 複数の行を選ぶこともできる

```{r}
select(blast_animals, number_otu_id, chiba_1_zbj, target_top1)
```

## 行を抜き出す

- 数字でも指定できる

```{r}
select(blast_animals, 1, 2)
```

## 行を抜き出す

- `:`で行の範囲を指定できる

```{r}
select(blast_animals, 1:4)
```

## 行を抜き出す

- `:`で行の範囲を指定できる

```{r}
select(blast_animals, number_otu_id:gyotoku_zbj)
```

## 列を絞る

- `filter()`である条件に合っている列だけに絞る

```{r}
filter(blast_animals, target_top1 == "Diaprepes_sp.")
```

## 列を絞る

- `filter()`である条件に合っている列だけに絞る

```{r}
filter(blast_animals, identity_top1 > 98)
```

## チャレンジ

`blast_animals`から"chiba_1_zbj"と"target_top1"のデータを切り出して、ゼロよりも多いOTUだけに絞って、別のcsvファイルとして保存して下さい。

- ヒント：`write_csv()`でcsvファイルを保存することができる
